<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NJsonSchema.CodeGeneration.TypeScript</name>
    </assembly>
    <members>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.DataConversionGenerator">
            <summary>Generates data conversion code.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.DataConversionGenerator.RenderConvertToJavaScriptCode(NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters)">
            <summary>Generates the code to convert a data object to the target class instances.</summary>
            <returns>The generated code.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.DataConversionGenerator.RenderConvertToClassCode(NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters)">
            <summary>Generates the code to convert a data object to the target class instances.</summary>
            <returns>The generated code.</returns>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters">
            <summary>The template parameters.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.Variable">
            <summary>Gets the variable.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.Value">
            <summary>Gets the value.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.Schema">
            <summary>Gets the schema.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.IsPropertyNullable">
            <summary>Gets a value indicating whether the property is nullable.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.CheckNewableObject">
            <summary>Gets or sets a value indicating whether to check the newable data object for null.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.TypeNameHint">
            <summary>Gets the type name hint.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.Resolver">
            <summary>Gets the resolver.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.NullValue">
            <summary>Gets or sets the null value.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.DataConversionParameters.Settings">
            <summary>Gets or sets the settings.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel">
            <summary>The TypeScript class template model.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.#ctor(System.String,System.String,NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings,NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver,NJsonSchema.JsonSchema,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel" /> class.</summary>
            <param name="typeName">The type name.</param>
            <param name="discriminatorName">The name to compare the discriminator against.</param>
            <param name="settings">The settings.</param>
            <param name="resolver">The resolver.</param>
            <param name="schema">The schema.</param>
            <param name="rootObject">The root object.</param>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.ClassName">
            <summary>Gets the class name.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.DiscriminatorName">
            <summary>Gets the name for the discriminator check.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasDiscriminator">
            <summary>Gets a value indicating whether the class has a discriminator property.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasBaseDiscriminator">
            <summary>Gets a value indicating whether the class or an inherited class has a discriminator property.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.BaseDiscriminator">
            <summary>Gets the class discriminator property name (may be defined in a inherited class).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasDescription">
            <summary>Gets a value indicating whether the class has description.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.Description">
            <summary>Gets the description.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasInheritance">
            <summary>Gets a value indicating whether this class has a parent class.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.Inheritance">
            <summary>Gets the inheritance code.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.InterfaceInheritance">
            <summary>Gets the constructor interface inheritance code.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.BaseClass">
            <summary>Gets the base class name.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.GenerateCloneMethod">
            <summary>Gets or sets a value indicating whether a clone() method should be generated in the DTO classes.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.GenerateConstructorInterface">
            <summary>Gets or sets a value indicating whether to generate an class interface which is used in the constructor to initialize the class (default: true).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.ConvertConstructorInterfaceData">
            <summary>Gets or sets a value indicating whether POJO objects in the constructor data are converted to DTO instances (default: true).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.NullValue">
            <summary>Gets the null value.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasIndexerProperty">
            <summary>Gets a value indicating whether the class inherits from dictionary.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.IndexerPropertyValueType">
            <summary>Gets the type of the indexer property value.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HandleReferences">
            <summary>Gets a value indicating whether to handle JSON references.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasProperties">
            <summary>Gets a value indicating whether the type has properties.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.Properties">
            <summary>Gets the property models.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.HasDefaultValues">
            <summary>Gets a value indicating whether any property has a default value.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.RequiresStrictPropertyInitialization">
            <summary>Gets a value indicating whether </summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.SupportsOverrideKeyword">
            <summary>Gets a value indicating whether </summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.ExportTypes">
            <summary>Gets a value indicating whether the export keyword should be added to all classes.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.GenerateTypeCheckFunctions">
            <summary>Gets a value indicating whether to generate type check functions.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel.InheritedSchema">
            <summary>Gets the inherited schema.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel">
            <summary>The TypeScript enum template model.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.#ctor(System.String,NJsonSchema.JsonSchema,NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel" /> class.</summary>
            <param name="typeName">Name of the type.</param>
            <param name="schema">The schema.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.Name">
            <summary>Gets the name of the enum.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.HasDescription">
            <summary>Gets a value indicating whether the enum has description.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.Description">
            <summary>Gets the description.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.ExportTypes">
            <summary>Gets a value indicating whether the export keyword should be added to all enums.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.ExtensionData">
            <summary>Gets the property extension data.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.EnumTemplateModel.Enums">
            <summary>Gets the enum values.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel">
            <summary>The TypeScript file template model.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.#ctor(NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel"/> class.</summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.Types">
            <summary>Gets or sets the code of all types.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.ExtensionCode">
            <summary>Gets or sets the extension code.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.HasModuleName">
            <summary>Gets or sets a value indicating whether the file has module name.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.ModuleName">
            <summary>Gets or sets the name of the module.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.HasNamespace">
            <summary>Gets or sets a value indicating whether the file has module name.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.Namespace">
            <summary>Gets or sets the name of the module.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.FileTemplateModel.HandleReferences">
            <summary>Gets a value indicating whether to handle JSON references.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel">
            <summary>The TypeScript property template model.</summary>
            <seealso cref="T:NJsonSchema.CodeGeneration.Models.PropertyModelBase" />
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.#ctor(NJsonSchema.CodeGeneration.TypeScript.Models.ClassTemplateModel,NJsonSchema.JsonSchemaProperty,System.String,NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver,NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel"/> class.</summary>
            <param name="classTemplateModel">The class template model.</param>
            <param name="property">The property.</param>
            <param name="parentTypeName">Name of the parent type.</param>
            <param name="typeResolver">The resolver.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.InterfaceName">
            <summary>Gets the name of the property in an interface.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.HasDescription">
            <summary>Gets a value indicating whether the property has description.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.Description">
            <summary>Gets the description.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.Type">
            <summary>Gets the type of the property.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.ConstructorInterfaceType">
            <summary>Gets the type of the property in the initializer interface.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.SupportsConstructorConversion">
            <summary>Gets a value indicating whether constructor conversion is supported.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.IsArray">
            <summary>Gets a value indicating whether the property type is an array.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.IsDictionary">
            <summary>Gets a value indicating whether the property type is a dictionary.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.ArrayItemType">
            <summary>Gets the type of the array item.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.DictionaryItemType">
            <summary>Gets the type of the dictionary item.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.TypePostfix">
            <summary>Gets the type postfix (e.g. ' | null | undefined')</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.IsReadOnly">
            <summary>Gets a value indicating whether the property is read only.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.IsOptional">
            <summary>Gets a value indicating whether the property is optional.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.IsDiscriminator">
            <summary>Gets a value indicating whether the property is an inheritance discriminator.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.ConvertToClassCode">
            <summary>Gets the convert to class code.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.Models.PropertyModel.ConvertToJavaScriptCode">
            <summary>Gets the convert to JavaScript code.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType">
            <summary>Specifies the TypeScript date time type handling.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.Date">
            <summary>Uses the JavaScript Date object for date time handling.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.MomentJS">
            <summary>Uses the Moment.js for date time handling.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.String">
            <summary>Uses the strings for date time handling (no conversion).</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.OffsetMomentJS">
            <summary>Uses the Moment.js for date time with offset handling.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.Luxon">
            <summary>Uses Luxon for date time handling.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.DayJS">
            <summary>Uses the DayJS.js for date time handling.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptEnumStyle">
            <summary>The TypeScript enum styles.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptEnumStyle.Enum">
            <summary>Generates enum.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptEnumStyle.StringLiteral">
            <summary>Generates enum as a string literal.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptExtensionCode">
            <summary>Provides access to the extension code (used in TypeScript).</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptExtensionCode.#ctor(System.String,System.String[],System.String[])">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.ExtensionCode" /> class.</summary>
            <param name="code">The code.</param>
            <param name="extendedClasses">The extended classes.</param>
            <param name="baseClasses">The base classes.</param>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator">
            <summary>The TypeScript interface and enum code generator. </summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.#ctor(NJsonSchema.JsonSchema)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator"/> class.</summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.#ctor(System.Object,NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator"/> class.</summary>
            <param name="rootObject">The root object to search for all JSON Schemas.</param>
            <param name="settings">The generator settings.</param>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.#ctor(System.Object,NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings,NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator" /> class.</summary>
            <param name="rootObject">The root object to search for all JSON Schemas.</param>
            <param name="settings">The generator settings.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.Settings">
            <summary>Gets the generator settings.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.GenerateTypes">
            <summary>Generates all types from the resolver with extension code from the settings.</summary>
            <returns>The code.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.GenerateTypes(NJsonSchema.CodeGeneration.TypeScript.TypeScriptExtensionCode)">
            <summary>Generates all types from the resolver with the given extension code.</summary>
            <returns>The code.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.GenerateFile(System.Collections.Generic.IEnumerable{NJsonSchema.CodeGeneration.CodeArtifact})">
            <summary>Generates the file.</summary>
            <returns>The file contents.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGenerator.GenerateType(NJsonSchema.JsonSchema,System.String)">
            <summary>Generates the type.</summary>
            <param name="schema">The schema.</param>
            <param name="typeNameHint">The fallback type name.</param>
            <returns>The code.</returns>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings">
            <summary>The generator settings.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.#ctor">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings"/> class.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.TypeScriptVersion">
            <summary>Gets or sets the target TypeScript version (default: 2.7).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.SupportsStrictNullChecks">
            <summary>Gets a value indicating whether the target TypeScript version supports strict null checks.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.RequiresStrictPropertyInitialization">
            <summary>Gets a value indicating whether the target TypeScript version requires strict property initialization.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.SupportsOverrideKeyword">
            <summary>Gets a value indicating whether the target TypeScript version supports override keyword.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.MarkOptionalProperties">
            <summary>Gets or sets a value indicating whether to mark optional properties with ? (default: false).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.TypeStyle">
            <summary>Gets or sets the type style (default: Class).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.DateTimeType">
            <summary>Gets or sets the date time type (default: 'Date').</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ConvertDateToLocalTimezone">
            <summary>
            Whether to use UTC (default) or local time zone when deserializing dates 'yyyy-MM-dd' (default: 'false').
            Only applicable if <see cref="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.DateTimeType"/> is <see cref="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptDateTimeType.Date"/>.
            Other DateTimeTypes use local timezone by default.
            </summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.EnumStyle">
            <summary>Gets or sets the enum style (default: Enum).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.UseLeafType">
            <summary>Generate leaf types for an object with discriminator (default: false).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ModuleName">
            <summary>Gets or sets the TypeScript module name (default: '', no module).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.Namespace">
            <summary>Gets or sets the TypeScript namespace (default: '', no namespace).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ExtendedClasses">
            <summary>Gets or sets the list of extended classes (the classes must be implemented in the <see cref="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ExtensionCode"/>).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ExtensionCode">
            <summary>Gets or sets the extension code to append to the generated code.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ClassTypes">
            <summary>Gets or sets the type names which always generate plain TypeScript classes.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.NullValue">
            <summary>Gets or sets the TypeScript null value.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.HandleReferences">
            <summary>Gets or sets a value indicating whether to handle JSON references (supports $ref, $id, $values, default: false).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.GenerateCloneMethod">
            <summary>Gets or sets a value indicating whether a clone() method should be generated in the DTO classes.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.GenerateConstructorInterface">
            <summary>Gets or sets a value indicating whether to generate an class interface which is used in the constructor to initialize the class (default: true).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ConvertConstructorInterfaceData">
            <summary>Gets or sets a value indicating whether POJO objects in the constructor data are converted to DTO instances (GenerateConstructorInterface must be enabled, default: false).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.ExportTypes">
            <summary>Gets or sets a value indicating whether the export keyword should be added to all classes and enums (default: true).</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.InlineNamedDictionaries">
            <summary>Gets or sets a value indicating whether named/referenced dictionaries should be inlined or generated as class with an indexer.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.GenerateTypeCheckFunctions">
            <summary>Gets a value indicating whether to generate type check functions (for type style interface only, default: false).</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings.GetTypeStyle(System.String)">
            <summary>Gets the type style of the given type name.</summary>
            <param name="typeName">The type name.</param>
            <returns>The type style.</returns>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptNullValue">
            <summary>The TypeScript null value used in object initializers.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptNullValue.Null">
            <summary>JavaScript null.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptNullValue.Undefined">
            <summary>JavaScript undefined.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptPropertyNameGenerator">
            <summary>Generates the property name for a given TypeScript <see cref="T:NJsonSchema.JsonSchemaProperty"/>.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptPropertyNameGenerator.ReservedPropertyNames">
            <summary>Gets or sets the reserved names.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptPropertyNameGenerator.Generate(NJsonSchema.JsonSchemaProperty)">
            <inheritdoc />
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver">
            <summary>Manages the generated types and converts JSON types to TypeScript types. </summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.#ctor(NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver" /> class.</summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.Settings">
            <summary>Gets the generator settings.</summary>
        </member>
        <member name="P:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.Namespace">
            <summary>Gets or sets the namespace of the generated classes.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.ResolveConstructorInterfaceName(NJsonSchema.JsonSchema,System.Boolean,System.String)">
            <summary>Resolves and possibly generates the specified schema. Returns the type name with a 'I' prefix if the feature is supported for the given schema.</summary>
            <param name="schema">The schema.</param>
            <param name="isNullable">Specifies whether the given type usage is nullable.</param>
            <param name="typeNameHint">The type name hint to use when generating the type and the type name is missing.</param>
            <returns>The type name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="schema"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.Resolve(NJsonSchema.JsonSchema,System.Boolean,System.String)">
            <summary>Resolves and possibly generates the specified schema.</summary>
            <param name="schema">The schema.</param>
            <param name="isNullable">Specifies whether the given type usage is nullable.</param>
            <param name="typeNameHint">The type name hint to use when generating the type and the type name is missing.</param>
            <returns>The type name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="schema"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.SupportsConstructorConversion(NJsonSchema.JsonSchema)">
            <summary>Gets a value indicating whether the schema supports constructor conversion.</summary>
            <param name="schema">The schema.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeResolver.IsDefinitionTypeSchema(NJsonSchema.JsonSchema)">
            <summary>Checks whether the given schema should generate a type.</summary>
            <param name="schema">The schema.</param>
            <returns>True if the schema should generate a type.</returns>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeStyle">
            <summary>The TypeScript type styles.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeStyle.Interface">
            <summary>Generates interfaces which can add typings to existing JSON.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeStyle.Class">
            <summary>Generates classes which can be constructed from JSON.</summary>
        </member>
        <member name="F:NJsonSchema.CodeGeneration.TypeScript.TypeScriptTypeStyle.KnockoutClass">
            <summary>Generates classes with KnockoutJS observable properties.</summary>
        </member>
        <member name="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptValueGenerator">
            <summary>Converts the default value to a TypeScript identifier.</summary>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptValueGenerator.#ctor(NJsonSchema.CodeGeneration.TypeScript.TypeScriptGeneratorSettings)">
            <summary>Initializes a new instance of the <see cref="T:NJsonSchema.CodeGeneration.TypeScript.TypeScriptValueGenerator"/> class.</summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptValueGenerator.GetEnumDefaultValue(NJsonSchema.JsonSchema,NJsonSchema.JsonSchema,System.String,NJsonSchema.CodeGeneration.TypeResolverBase)">
            <summary>Gets the enum default value.</summary>
            <param name="schema">The schema.</param>
            <param name="actualSchema">The actual schema.</param>
            <param name="typeNameHint">The type name hint.</param>
            <param name="typeResolver">The type resolver.</param>
            <returns>The enum default value.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptValueGenerator.GetDefaultValue(NJsonSchema.JsonSchema,System.Boolean,System.String,System.String,System.Boolean,NJsonSchema.CodeGeneration.TypeResolverBase)">
            <summary>Gets the default value code.</summary>
            <param name="schema">The schema.</param>
            <param name="allowsNull">Specifies whether the default value assignment also allows null.</param>
            <param name="targetType">The type of the target.</param>
            <param name="typeNameHint">The type name hint to use when generating the type and the type name is missing.</param>
            <param name="useSchemaDefault">if set to <c>true</c> uses the default value from the schema if available.</param>
            <param name="typeResolver">The type resolver.</param>
            <returns>The code.</returns>
        </member>
        <member name="M:NJsonSchema.CodeGeneration.TypeScript.TypeScriptValueGenerator.GetNumericValue(NJsonSchema.JsonObjectType,System.Object,System.String)">
            <summary>Converts the default value to a TypeScript number literal. </summary>
            <param name="type">The JSON type.</param>
            <param name="value">The value to convert.</param>
            <param name="format">Optional schema format</param>
            <returns>The TypeScript number literal.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
